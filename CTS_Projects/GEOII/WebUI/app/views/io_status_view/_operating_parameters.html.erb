<%= javascript_include_tag 'system_view' %>
<div>
	<div>
		<h3 style='color:#000'> Operating Parameters<br /></h3>
	</div>	
</div>
<% if @mcf_params.blank? %>
<p>
    No Parameters found!!
</p>
<% else %>
<% form_tag "/diagnostic_terminal/update_operating_parameters", :class => 'update_operating_parameters' do %>
<%= hidden_field "atcs", "addr", :value => @online.atcs_address %>
<%= hidden_field "card", "index", :value => @online.card_index %>
<%= hidden_field "card", "type", :value => @card_type %>
<table border=0 style='width:300px;' class='parameters_table'>
    <tr>
        <th style='float:left;'>
            Parameter
        </th>
        <th style='width:100px;text-align:left;'>
            Value
        </th>
    </tr>
    <% @mcf_params.each_with_index do |parameter, i| %>
    <% unless parameter.name.match('filler') %>
    <% rt_parameter = get_rt_parameter(parameter).first %>
    <% if parameter.name.eql? "PCOOptions" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "pco_options", options_for_select([["Use MDI", 0], ["Don't user MDIs", 1]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.eql? "PerformColdFilamentTest" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "cold_filament", options_for_select([["Enable", 1], ["Disable", 0]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.eql? "Transmit" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "transmit", options_for_select([["Enable", 1], ["Disable", 0]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.eql? "Receive" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "receive", options_for_select([["Enable", 1], ["Disable", 0]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.eql? "Code5" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "code5", options_for_select([["Normal", 1], ["Alt", 0]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.eql? "EC4Compatibility" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= select "parameter", "ec4_compatibility", options_for_select([["EC4 Compatible", 1], ["EC4 Plus Compatible", 0]], get_parameter_enum_value(parameter, rt_parameter)), {}, {:style => "width:70px", :disabled => parameter.enabled ? 1 : 0} %>
        </td>
    </tr>
    <% elsif parameter.name.match("NonvitalCodeChangeCycles") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "non_vital_code_change_cycle", :value => rt_parameter.current_value, :onclick => "check_integer_bounds(1, 3, this)", :onKeyUp => "check_integer_bounds(1, 3, this)", :onblur => "check_integer_bounds(1, 3, this)", :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %>
        </td>
    </tr>
    <% elsif parameter.name.match("VitalCodeChangeCycles") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "vital_code_change_cycle", :value => rt_parameter.current_value, :onclick => "check_integer_bounds(1, 3, this)", :onKeyUp => "check_integer_bounds(1, 3, this)", :onblur => "check_integer_bounds(1, 3, this)", :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %>
        </td>
    </tr>
    <% elsif parameter.name.match("ShuntDropCycles") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "shunt_drop_cycles", :value => rt_parameter.current_value, :onclick => "check_integer_bounds(1, 3, this)", :onKeyUp => "check_integer_bounds(1, 8, this)", :onblur => "check_integer_bounds(1, 8, this)", :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %>
        </td>
    </tr>
    <% elsif parameter.name.match("ShuntPickCycles") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "shunt_pick_cycles", :value => rt_parameter.current_value, :onclick => "check_integer_bounds(1, 3, this)", :onKeyUp => "check_integer_bounds(1, 8, this)", :onblur => "check_integer_bounds(1, 8, this)", :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %>
        </td>
    </tr>
    <% elsif parameter.param_typedef.eql? "INTEGER" %>
    <% integer_value = GeoInteger.find_by_name(parameter.name, :conditions => {:mcfcrc => parameter.mcfcrc}) %>
    <% if parameter.name.match("LampFilamentThreshold") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "lamp_filament", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i * 5, :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px", 
       :disabled => parameter.enabled ? 1 : 0 %>&nbsp;<span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("VPIDebounce") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "vpi_bounce", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i, :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px", 
:disabled => parameter.enabled ? 1 : 0 %>&nbsp;<span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("CurrentLimit") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "current_limit", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i, :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px", 
:disabled => parameter.enabled ? 1 : 0 %>&nbsp;<span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("LampVoltage") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "lamp_voltage", :value => get_parameter_integer_value(integer_value, rt_parameter), :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px", 
:disabled => parameter.enabled ? 1 : 0 %>&nbsp;<span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("PCO1Debounce") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "pco_1_debounce", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i * 2, :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px",
 :disabled => parameter.enabled ? 1 : 0 %>&nbsp;<span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("PCO1Correspondance") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "pco_1_correspondance", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i * 5, :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px",
 :disabled => parameter.enabled ? 1 : 0 %><span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("PCO2Debounce") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "pco_2_debounce", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i * 2, :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px",
 :disabled => parameter.enabled ? 1 : 0 %><span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% elsif parameter.name.match("PCO1Correspondance") %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "pco_2_correspondance", :value => get_parameter_integer_value(integer_value, rt_parameter).to_i * 5, :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onclick => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :onblur => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px",
 :disabled => parameter.enabled ? 1 : 0 %><span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% else %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "#{i}", :value => get_parameter_integer_value(integer_value, rt_parameter), :onKeyUp => "check_integer_bounds(#{integer_value.try(:lower_bound)}, #{integer_value.try(:upper_bound)}, this)", :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %><span style='color:#FFF;'><%= integer_value.unit if integer_value %></span>
        </td>
    </tr>
    <% end %>
    <% elsif parameter.param_typedef.eql? "BIT" %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= text_field "parameter", "#{i}", :value => rt_parameter.current_value, :style => "width:70px", :disabled => parameter.enabled ? 1 : 0 %>
        </td>
    </tr>
    <% else %>
    <tr>
        <td>
            <%= parameter.name %>
        </td>
        <td>
            <%= rt_parameter.current_value %>
        </td>
    </tr>
    <% end %>
    <% end %>
    <% end %>
    <tr>
        <td>
            <%= image_submit_tag("/images/update_arte.png", :class => 'operating_update', :disabled => true) %>
        </td>
    </tr>
</table>
<% end %>
<% end %>
